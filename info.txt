в терминале:
команда dotnet - проверка, что dotnet встал (нет ошибок)
команда dotnet --version - проверка версии 

Ctrl + Ё - переходим/отрываем/закрываем терминал

Включить автосохранение файла, иначе программа не будет 
читать внесенные в код изменения, пока вручную не сохраним (Ctrl + S): 
Ctrl + Shift + P - выйдет строка, где пишем auto save - выходит fale: toggle auto save - 
на нее нажимаем

Если в терминале русские символы заменяются на ???:
В самой ОС Windows зайти в найтройки - Время и язык - Язык - Административные языковые настройки - 
Изменить местоположение системы (Change system locate) - поставить галочку "Beta-версия. Использовать юникод UTF-8 для международной
поддержки" - после потребуется перезагрузить систему.

Отформатировать код в единый формат (без лишних пробелов, выравнивание): Shift + Alt + F
(или правая кнопка мыши - форматировать документ)

!!!  cw - автоматически подставляет System.Console.WriteLine();

Есть 3 типа численных данных: byte, int, long. Они отличаются
своим максимальным значением. Проверить какое именно максимальное значение
для каждого из этих типов можно введя команды:

System.Console.WriteLine(byte.MaxValue);
System.Console.WriteLine(int.MaxValue);
System.Console.WriteLine(long.MaxValue);

Получим значения
255
2147483647
9223372036854775807

Это нужно для оптимизации программы, чтобы правильно выделять количество памяти (если знаем, что 
будут числа 1 - 10, им не нужен int, можно обойтись byte)

Convert.ToInt32(Console.ReadLine()) - конвертер, который лучше использовать 
// вместо int.Parse. Он точно так же вызывает внутри себя метод int.Parse, 
// но при этом содержит встроенные проверки, чтобы не выходили ошибки, если 
// пользователь неправильно введет  данные или не введет ничего. 

// Convert.ToInt32() - конвертация в int
// Convert.ToInt16() - конвертация в byte
// Convert.ToInt64() - конвертация в long


Принудительное прерывание выполнения кода в терминале - Ctrl + C

